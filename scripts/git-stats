#!/usr/bin/env python

from __future__ import print_function

import argparse
import subprocess
import sys
from collections import defaultdict


class Stats(object):
    def __init__(self, commits=0, updates=0, insertions=0, deletions=0):
        self.commits = commits
        self.updates = updates
        self.insertions = insertions
        self.deletions = deletions

    def update(self, stats):
        self.commits += 1
        for stat in stats.split(', '):
            try:
                value = int(stat.strip().split(' ')[0])
            except ValueError as e:
                print("\n".join(stats) + "\n  ERROR: " + e)

            if stat.endswith('(+)'):
                self.insertions += value
            elif stat.endswith('(-)'):
                self.deletions += value
            else:
                self.updates += value

    @property
    def delta(self):
        return self.insertions - self.deletions

    def __add__(self, other):
        return Stats(
            commits=self.commits + other.commits,
            updates=self.updates + other.updates,
            insertions=self.insertions + other.insertions,
            deletions=self.deletions + other.deletions
        )

    def __str__(self):
        return "{} commits, {} updates, {} inserts, {} deletions, {} lines".format(self.commits, self.updates,
                                                                                   self.insertions,
                                                                                   self.deletions,
                                                                                   self.delta)


def determine_user_mapping(user_mapping):
    user_map = {}
    for arg in user_mapping:
        split = arg.split(':')
        if len(split) == 2:
            user_map[split[0]] = split[1]
    return user_map


def collect_stats_per_user(output, user_map):
    stats_per_user = defaultdict(Stats)
    user = "<unknown>"
    for binary_line in output.splitlines():
        line = binary_line.decode('utf-8')
        if line.strip() == "":
            continue

        if line[0] != ' ':
            user = line.split(' ')[1].lower()
            if user in user_map:
                user = user_map[user]
        else:
            stats_per_user[user].update(line)

    return stats_per_user


def render_table(stats, options):
    import prettytable

    global_stats = Stats()

    columns = get_title(options)
    table = prettytable.PrettyTable(columns)
    table.align[columns[0]] = "l"
    for column in columns[1:]:
        table.align[column] = "r"

    for user, user_stats in stats:
        row = [user, user_stats.commits, user_stats.updates, user_stats.insertions, user_stats.deletions,
               user_stats.delta]
        if options.project_name:
            row = [options.project_name] + row
        table.add_row(row)
        global_stats += user_stats

    table.add_row(["TOTAL", global_stats.commits, global_stats.updates, global_stats.insertions, global_stats.deletions,
                   global_stats.delta])

    return str(table)


def get_title(options):
    columns = ["User", "Commits", "Updates", "Insertions", "Deletions", "Delta"]
    if options.project_name:
        columns = ["Project"] + columns
    return columns


if __name__ == '__main__':
    parser = argparse.ArgumentParser(description='Create user statistics for git projects')
    parser.add_argument('user_mapping', nargs='*')
    parser.add_argument('-p', '--project_name', type=str,
                        help='optional project name')
    parser.add_argument('-f', '--filter', type=str, nargs='*', dest='filter_users', help='filter by user name')
    parser.add_argument('--pretty', dest='pretty_output', action='store_true',
                        help='pretty printed instead of CSV output')
    parser.add_argument('-s','--since', dest='since', type=str, default=None)

    options = parser.parse_args()

    try:
        git_log_args = ["git", "log", "--format=%h %ae"]
        if options.since is not None:
            git_log_args += ['--since=' + options.since]
        git_log_args += ["--shortstat", "--no-merges", "-C"]
        output = subprocess.check_output(git_log_args)
    except:
        sys.exit(0)

    user_map = determine_user_mapping(options.user_mapping)

    stats_per_user = collect_stats_per_user(output, user_map)

    sorted_stats = sorted(stats_per_user.items(), key=lambda item: item[1].commits, reverse=True)

    filter_users = set(options.filter_users) if options.filter_users else None
    if options.pretty_output:
        print(render_table(sorted_stats, options))
    else:
        for user, stats in sorted_stats:
            if filter_users is None or user in filter_users:
                row = [user, stats.commits, stats.updates, stats.insertions, stats.deletions, stats.delta]
                if options.project_name:
                    row = [options.project_name] + row
                print(";".join([str(value) for value in row]))
